#!/usr/local/bin/python

"""
get_exon_coords_phases.py:

    generate a table with exon coordinates/phases of *.sg files in a given SpliceGraph directory

"""

import os
import sys
import SpliceGraph
from optparse import OptionParser, make_option

# default directory
#defaultDir = '/r100/burge/shared/splice_graphs/mm6/FlatFiles/SpliceGraphs_chr1'
defaultDir = '/r100/burge/shared/splice_graphs/hg17/FlatFiles/SpliceGraphs_chr1'

# digest command line
opts = OptionParser(option_list=                                                                        \
                    [make_option('-d','--dir', dest='inDir', default=defaultDir,                        \
                                 help='input directory with *.sg files'),                               \
                     make_option('-o','--out', dest='outFile',                                          \
                                 default='exon_coords_phases.hg17.chr1.txt',                            \
                                 help='output file with exon information'),                             \
                     ])
(options, args) = opts.parse_args()

if not os.path.isdir(options.inDir):
    print >> sys.stderr, "ERROR: input directory is not found.\n"
    opts.print_help(sys.stderr)
    sys.exit(0)

else:
    try:
        outFile  = open(options.outFile, 'w')
    except:
        print >> sys.stderr, 'ERROR opening output files: %s' % sys.exc_info()[1]
    else:
        outFile.write("#exon information for SpliceGraph gene models, generated by get_exon_coords_phases.py, indir: %s\n" % options.inDir)
        outFile.write("#gnId\texId\tchr\tstart\tend\tstrand\tnbPhaseEvidence\tstartPhases\tendPhases\tcdsLengthes\tevidenceIds\n")

        sg_iter = SpliceGraph.SpliceGraphIterator(options.inDir)
        sg = sg_iter.next_sg()
        while ( sg ):
            phases = sg.getExonPhases()

            for ex in sg.allExons(internalOnly=False):
                exId = ex[0] + ':E:' + ex[1]
                chr, exStart, strand = ex[0].split(':')
                exEnd = ex[1].split(':')[1]
                if strand == '-':
                    exStrat, exEnd = exEnd, exStart
                
                evidenceIds = []
                cdsLens     = []
                startPhases = []
                endPhases   = []
                if phases.has_key(ex[0]) and phases[ex[0]].has_key(ex[1]):
                    for phaseinfo in phases[ex[0]][ex[1]]:
                        evidenceIds.append(phaseinfo[0])
                        cdsLens.append(str(phaseinfo[1]))
                        startPhases.append(str(phaseinfo[2]))
                        endPhases.append(str(phaseinfo[3]))
                else:
                    evidenceIds.append('-')
                    cdsLens.append('-')
                    startPhases.append('-1')
                    endPhases.append('-1')

            outFile.write('%s\t%s\t%s\t%s\t%s\t%s\t%i\t%s\t%s\t%s\t%s\n' % \
                          (sg.name, \
                           exId, \
                           chr, \
                           exStart, \
                           exEnd, \
                           strand, \
                           len(evidenceIds), \
                           ','.join(startPhases), \
                           ','.join(endPhases), \
                           ','.join(cdsLens), \
                           ','.join(evidenceIds), \
                           ))
            sys.stderr.write("%i of %i done...\r" % (sg_iter.index, sg_iter.number))

            sg = sg_iter.next_sg()

        outFile.close()
